{
  "name": "socketcluster",
  "description": "SocketCluster - A Highly parallelized WebSocket server cluster to make the most of multi-core machines/instances.",
  "version": "1.2.3",
  "homepage": "http://socketcluster.io",
  "contributors": [
    {
      "name": "Jonathan Gros-Dubois",
      "email": "grosjona@yahoo.com.au"
    }
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/topcloud/socketcluster.git"
  },
  "dependencies": {
    "async": "0.7.0",
    "base64id": "0.1.0",
    "forever-monitor": "1.5.2",
    "http-proxy": "1.6.2",
    "iocluster": "1.6.x",
    "minimist": "1.1.0",
    "socketcluster-server": "0.9.x",
    "uid-number": "0.0.5",
    "wrench": "1.5.8"
  },
  "bin": {
    "socketcluster": "bin/cli.js"
  },
  "keywords": [
    "websocket",
    "server",
    "realtime",
    "engine.io",
    "cluster",
    "parallelized"
  ],
  "license": "MIT",
  "readmeFilename": "README.md",
  "readme": "SocketCluster\r\n======\r\n\r\n[![SocketCluster logo](https://raw.github.com/topcloud/socketcluster/master/assets/logo.png)](http://socketcluster.io/)\r\n\r\nComplete documentation available at: http://socketcluster.io/\r\n\r\n## Change log\r\n\r\n**14 November 2014** (v1.0.1)\r\n\r\nUpdated http://socketcluster.io/ documentation (partially).\r\n\r\nv1.0.1 is not a drop-in upgrade. It involves some major changes to the client-side API (documented on website).\r\nBefore this version, SC made no explicit distinction between pub/sub channels and regular client <=> server events.\r\nBy listening to an event, the socket was implicitly subscribing to a channel by the same name.\r\nThis feature was nice but it also masked a lot of the complexity behind SC and made handling events vs channels ambiguous and took\r\naway flexibility from the developer.\r\n\r\nThe goal of this release is to make SC a viable open-source alternative to commercial realtime services like PubNub, Pusher, Firebase, etc...\r\nBut without you having to give up control over your backend.\r\n\r\nHere is some sample code which demonstrates how to use the new API:\r\n\r\n```js\r\n// Subscribe to a channel\r\n\r\nvar fooChannel = socket.subscribe('foo');\r\n// or\r\nsocket.subscribe('foo'); // We don't necessarily need the channel object\r\n\r\n```\r\n\r\n```js\r\n// Subscribe events\r\n\r\n// Note that subscribe will only fail if explicitly blocked by middleware.\r\n// If the connection drops out, the subscription will stay pending until \r\n// the connection comes back.\r\n\r\nfooChannel.on('subscribeFail', function (err, channelName) {\r\n // ...\r\n});\r\n\r\nfooChannel.on('subscribe', function (channelName) {\r\n // ...\r\n});\r\n\r\nsocket.on('subscribeFail', function (err, channelName) {\r\n  // ...\r\n});\r\n\r\nsocket.on('subscribe', function (channelName) {\r\n  // ...\r\n});\r\n```\r\n\r\n```js\r\n// Watch incoming channel data\r\n\r\nfooChannel.watch(function (data) {\r\n  // This function will run whenever data is published\r\n  // to the foo channel.\r\n});\r\n// or\r\nsocket.watch('foo', function (data) {\r\n  // This function will run whenever data is published\r\n  // to the foo channel.\r\n});\r\n```\r\n\r\n```js\r\n// Publish data to a channel\r\n\r\nfooChannel.publish(12345);             // publish from channel\r\n// or\r\nsocket.channel('foo').publish(12345);  // same as above\r\n// or\r\nsocket.publish('foo', 12345);          // publish from socket\r\n// or\r\nsocket.publish('foo', {a: 123, b: 4}); // objects are valid too\r\n```\r\n\r\n```js\r\nfooChannel.unsubscribe();  // unsubscribe from channel\r\n// or\r\nsocket.unsubscribe('foo'); // unsubscribe using socket\r\n```\r\n\r\n```js\r\n// Emit events between client and server.\r\n// This is the same as before.\r\n\r\nsocket.emit('greeting', {from: 'alice', message: 'Hello'});\r\n```\r\n\r\n```js\r\n// Listen to events emitted on socket.\r\n// Same as before.\r\n\r\nsocket.on('greeting', function (data) {\r\n // ...\r\n});\r\n```\r\n\r\n\r\n## Introduction\r\n\r\nSocketCluster is a fast, highly scalable HTTP + realtime server engine which lets you build multi-process \r\nrealtime servers that make use of all CPU cores on a machine/instance.\r\nIt removes the limitations of having to run your Node.js server as a single thread and makes your backend \r\nresilient by automatically recovering from worker crashes and aggregating errors into a central log.\r\n\r\nFollow the project on Twitter: https://twitter.com/SocketCluster\r\nSubscribe for updates: http://socketcluster.launchrock.com/\r\n\r\n## Memory leak profile\r\n\r\nSocketCluster has been tested for memory leaks.\r\nThe last full memory profiling was done on SocketCluster v0.9.17 (Node.js v0.10.28) and included checks on load balancer, worker and store processes.\r\n\r\nNo memory leaks were detected when using the latest Node.js version.\r\nNote that leaks were found when using Node.js versions below v0.10.22 - This is probably the Node.js 'Walmart' memory leak - Not a SocketCluster issue.\r\n\r\n## Main Contributors\r\n\r\n- Jonathan Gros-Dubois\r\n- Nelson Zheng\r\n- wactbprot (nData)\r\n- epappas (nData)\r\n- Gabriel Muller\r\n\r\n## Installation\r\n\r\nThere are two ways to install SocketCluster.\r\n\r\n### The easy way (Sets up boilerplate - Ready to run):\r\n\r\nSetup the socketcluster command:\r\n\r\n```bash\r\nnpm install -g socketcluster\r\n```\r\n\r\nOR \r\n\r\n```bash\r\nsudo npm install -g socketcluster\r\n```\r\n\r\nThen\r\n\r\n```bash\r\nsocketcluster create myapp\r\n```\r\n\r\nOnce it's installed, go to your new myapp/ directory and launch with:\r\n\r\n```bash\r\nnode server\r\n```\r\n\r\nAccess at URL http://localhost:8000/\r\n\r\n### The hard way (More modular - Separate server and client):\r\n\r\n```bash\r\nnpm install socketcluster\r\n```\r\n\r\nYou will also need to install the client separately which you can get using the following command:\r\n\r\n```bash\r\nnpm install socketcluster-client\r\n```\r\n\r\nThe socketcluster-client script is called socketcluster.js (located in the main socketcluster-client directory) \r\n- You should include it in your HTML page using a &lt;script&gt; tag in order to interact with SocketCluster.\r\nFor more details on how to use socketcluster-client, go to https://github.com/topcloud/socketcluster-client\r\n\r\nIt is recommended that you use Node.js version >=0.10.22 due to memory leaks present in older versions.\r\n\r\n### Using over HTTPS\r\n\r\nIn order to run SocketCluster over HTTPS, all you need to do is set the protocol to 'https' and \r\nprovide your private key and certificate as a start option when you instantiate SocketCluster - Example:\r\n\r\n```js\r\nvar socketCluster = new SocketCluster({\r\n  balancers: 1,\r\n  workers: 3,\r\n  stores: 3,\r\n  port: 8000,\r\n  appName: 'myapp',\r\n  workerController: 'worker.js',\r\n  protocol: 'https',\r\n  protocolOptions: {\r\n    key: fs.readFileSync(__dirname + '/keys/enc_key.pem', 'utf8'),\r\n    cert: fs.readFileSync(__dirname + '/keys/cert.pem', 'utf8'),\r\n    passphrase: 'passphase4privkey'\r\n  }\r\n});\r\n```\r\n\r\nThe protocolOptions option is exactly the same as the one you pass to a standard Node HTTPS server:\r\nhttp://nodejs.org/api/https.html#https_https_createserver_options_requestlistener\r\n\r\nNote that encryption/decryption in SocketCluster happens at the LoadBalancer level (SocketCluster launches one or more \r\nlightweight load balancers to distribute traffic evenly between your SocketCluster workers).\r\nLoadBalancers are responsible for encrypting/decrypting all network traffic. What this means is that your code (which is in the worker layer)\r\nwill only ever deal with raw HTTP traffic.\r\n\r\n### Authentication\r\n\r\nNote that SC lets your store your authentication tokens anywhere you like;\r\na database of your choice, Redis...\r\n\r\nSocketCluster also lets you store session data using the socket.session object. \r\nThis object gives you access to a cluster of in-memory stores called nData.\r\nnData is mostly used internally to allow workers to communicate with one another but it's also useful\r\nto store session-specific data. Note that if you want a user's auth token to span multiple sessions\r\n(so that user doesn't have to log in again after their session expires), then you might want\r\nto use a database to store the auth token instead of using the session object.\r\n\r\nIf you decide to use the socket.session object, you can invoke any of the methods \r\ndocumented here to store and retrieve session data:\r\nhttps://github.com/topcloud/ndata\r\n\r\nFor example, to authorize a user, you could check their login credentials and upon\r\nsuccess, you could add an auth token to that session:\r\n\r\n```js\r\nsocket.session.set('isUserAuthorized', true, callback);\r\n```\r\n\r\nThen, on subsequent events, you could check for that token before handling the event:\r\n\r\n```js\r\nsocket.session.get('isUserAuthorized', function (err, value) {\r\n  if (value) {\r\n    // Token is set, therefore this event is authorized\r\n  }\r\n});\r\n```\r\n\r\nThe session object can also be accessed from the req object that you get from \r\nSocketCluster's HTTP server 'req' event (I.e. req.session).\r\n\r\nSocketCluster provides two middleware lines for filtering out sockets and events.\r\n\r\nMIDDLEWARE_HANDSHAKE middleware for filtering out sockets based on session data:\r\n```js\r\nscServer.addMiddleware(scServer.MIDDLEWARE_HANDSHAKE, function (req, next) {\r\n  req.session.get('isUserAuthorized', function (err, value) {\r\n    if (value) {\r\n      next();\r\n    } else {\r\n      next('Session ' + req.session.id + ' was not authorized');\r\n    }\r\n  });\r\n});\r\n```\r\n\r\nMIDDLEWARE_EVENT middleware for filtering out individual events:\r\n```js\r\nscServer.addMiddleware(scServer.MIDDLEWARE_EVENT, function (socket, event, data, next) {\r\n  if (event == 'bla') {\r\n    next(new Error('bla event is not allowed for socket ' + socket.id + ' on session ' + socket.session.id));\r\n  } else {\r\n    next();\r\n  }\r\n});\r\n```\r\n\r\n## Contribute to SocketCluster\r\n\r\n- More integration test cases needed\r\n- Unit tests\r\n- Efficiency/speed - faster is better!\r\n- Suggestions?\r\n\r\nTo contribute; clone this repo, then cd inside it and then run npm install to install all dependencies.\r\n\r\n## License\r\n\r\n(The MIT License)\r\n\r\nCopyright (c) 2013-2015 TopCloud\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the 'Software'), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.",
  "bugs": {
    "url": "https://github.com/topcloud/socketcluster/issues"
  },
  "_id": "socketcluster@1.2.3",
  "_from": "socketcluster@>= 1.0.5"
}
